#+TITLE: Emacs configuration
#+AUTHOR: Alain M. Lafon
#+EMAIL: alain@200ok.ch

* Installation

*General* =git clone git@github.com:munen/emacs.d.git ~/.emacs.d=

*Dependencies* Emacs dependencies/libraries are managed via the internal
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Packages.html#Packages][package
management system]]. To initially install packages, open
=~/.emacs.d/init.el=, refresh your package list with
=M-x package-refresh-contents= and install everything using
=M-x eval-buffer=.

* Dependency management

** Define package repositories(archives)

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

** Define packages that are to be installed

#+BEGIN_SRC emacs-lisp

  (defvar my-packages '(ag
                        flycheck
                        auto-complete
                        web-mode
                        clojure-mode
                        parinfer
                        elfeed
                        elfeed-goodies
                        clj-refactor
                        cider
                        exec-path-from-shell
                        ac-cider
                        js2-mode
                        ac-js2
                        flycheck-flow
                        fixme-mode
                        sass-mode
                        yaml-mode
                        pdf-tools
                        tern
                        tern-auto-complete
                        coffee-mode
                        projectile
                        markdown-mode
                        enh-ruby-mode
                        robe
                        evil-mc
                        ledger-mode
                        smex
                        evil
                        evil-leader
                        evil-surround
                        evil-numbers
                        impatient-mode
                        restclient
                        magit
                        darktooth-theme
                        which-key
                        writeroom-mode
                        writegood-mode
                        zenburn-theme))
#+END_SRC

** Install packages

Note: If there is an error on startup =error: Package ‘some-package-’
is unavailable=, when the package list is not up to date. Run =M-x
package-refresh-contents= and after that execute the code block below
again with =C-x C-e=.

#+BEGIN_SRC emacs-lisp

  (dolist (p my-packages)
    (unless (package-installed-p p)
      (package-install p))
    (add-to-list 'package-selected-packages p))
#+END_SRC

* Default Settings

** Gargabe Collection

Allow 20MB of memory (instead of 0.76MB) before calling garbage
collection. This means GC runs less often, which speeds up some
operations.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000)
#+END_SRC

** Do not create backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

** Auto-Save in =/tmp=

Store backups and auto-saved files in TEMPORARY-FILE-DIRECTORY (which
defaults to /tmp on Unix), instead of in the same directory as the
file.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

** Always follow symlinks
   When opening a file, always follow symlinks.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

** Sentences have one space after a period
Don't assume that sentences should have two spaces after
periods.

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Confirm before closing Emacs
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Human readable units in =dired-mode=

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-alh")
#+END_SRC

** Ask =y/n= instead of =yes/no=
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Auto revert files on change
When something changes a file, automatically refresh the
buffer containing that file so they can't get out of sync.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** Shortcut for changing font-size
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-1") 'text-scale-increase)
  (define-key global-map (kbd "C-0") 'text-scale-decrease)
#+END_SRC
** Disable startup message

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
#+END_SRC

** Display the current time
#+BEGIN_SRC emacs-lisp
  (display-time-mode t)
#+END_SRC

** Do not display GUI Toolbar

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
#+END_SRC

** Automatic Line Breaks
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC

** Enable Narrow To Region

Enable narrow-to-region (C-x n n / C-x n w). This is disabled by
default to not confuse beginners.

#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

** Disable scroll bars
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** Remember the cursor position of files when reopening them
#+BEGIN_SRC emacs-lisp
  (setq save-place-file "~/.emacs.d/saveplace")
  (setq-default save-place t)
  (require 'saveplace)
#+END_SRC
** Set $MANPATH, $PATH and exec-path from shell even when started from GUI helpers like =dmenu= or =Spotlight=

#+BEGIN_SRC emacs-lisp

    (exec-path-from-shell-initialize)

#+END_SRC
** =winner-mode=

Allows to 'undo' (and 'redo') changes in the window configuration with
the key commands ‘C-c left’ and ‘C-c right’.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode 1))
#+END_SRC

Getting from many windows to one window is easy: 'C-x 1' will do it.
But getting back to a delicate WindowConfiguration is difficult. This
is where Winner Mode comes in: With it, going back to a previous
session is easy.
** Bell
   Do not ring the system bell, but show a visible feedback.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+END_SRC
** =auto-complete=
Basic Configuration

#+BEGIN_SRC emacs-lisp
(ac-config-default)
#+END_SRC
* Evil Mode
** Enable Evil
#+BEGIN_SRC emacs-lisp
  (evil-mode t)
  ;; Enable "M-x" in evil mode
  (global-set-key (kbd "M-x") 'execute-extended-command)
#+END_SRC

** Leader Mode Config

#+BEGIN_SRC emacs-lisp
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
  (evil-leader/set-key
    "w" 'basic-save-buffer
    "s" 'flyspell-buffer
    "b" 'evil-buffer
    "q" 'evil-quit)
#+END_SRC

** Evil Surround, emulating tpope's =surround.vim=

#+BEGIN_SRC emacs-lisp
  (require 'evil-surround)
  (global-evil-surround-mode 1)
#+END_SRC

** Multiple Cursors
https://github.com/gabesoft/evil-mc

evil-mc provides multiple cursors functionality for Emacs when used with evil-mode.

=C-n / C-p= are used for creating cursors, and =M-n / M-p= are used
for cycling through cursors. The commands that create cursors wrap
around; but, the ones that cycle them do not. To skip creating a
cursor forward use =C-t= or =grn= and backward =grp=. Finally use
=gru= to remove all cursors.

*** Enable =evil-mc= for all buffers

#+BEGIN_SRC emacs-lisp
(global-evil-mc-mode  1)
#+END_SRC

** Fast switching between buffers
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "{") 'evil-next-buffer)
  (define-key evil-normal-state-map (kbd "}") 'evil-prev-buffer)
#+END_SRC

** Increment / Decrement numbers

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-=") 'evil-numbers/inc-at-pt)
  (global-set-key (kbd "C--") 'evil-numbers/dec-at-pt)
  (define-key evil-normal-state-map (kbd "C-=") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C--") 'evil-numbers/dec-at-pt)
#+END_SRC

** Use =j/k= for browsing wrapped lines
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
#+END_SRC

** Paste in Visual Mode

#+BEGIN_SRC emacs-lisp
  (define-key evil-insert-state-map (kbd "C-v") 'evil-visual-paste)

#+END_SRC

** Disable =evil-mode= for some modes
#+BEGIN_SRC emacs-lisp
(mapc (lambda (mode)
        (evil-set-initial-state mode 'emacs))
      '(elfeed-show-mode elfeed-search-mode dired-mode image-dired-mode image-dired-thumbnail-mode))
#+END_SRC
** Unbind M-. and M- in =evil-mode=
=M-.= and =M-,= are popular keybindings for "jump to definition" and
"back".

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "M-.") nil)
  (define-key evil-normal-state-map (kbd "M-,") nil)
#+END_SRC
* ido-mode

=ido= means "Interactively Do Things"

This changes many defaults like =find-file= and switching
buffers. =ido= has a completion engine that's sensible to use
everywhere.

#+BEGIN_SRC emacs-lisp
  (ido-mode t)
  (ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** Use =smex= as M-X enhancement
Smex is a M-x enhancement for Emacs. Built on top of Ido, it provides
a convenient interface to your recently and most frequently used
commands. And to all the other commands, too.

#+BEGIN_SRC emacs-lisp
  (smex-initialize)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC
* Search

Replace i-search-(forward|backward) with their respective regexp
capable counterparts

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)

#+END_SRC

* Which Key
  =which-key= displays available keybindings in a popup.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'which-key-mode)
  (add-hook 'cider-mode-hook 'which-key-mode)
#+END_SRC

* Programming
** General
*** Auto Complete

#+BEGIN_SRC emacs-lisp
  (ac-config-default)
#+END_SRC
*** Tabs
Set tab width to 2 for all buffers

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

Use 2 spaces instead of a tab.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2 indent-tabs-mode nil)
#+END_SRC

Indentation cannot insert tabs.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Use 2 spaces instead of tabs for programming languages.

#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)

  (setq coffee-tab-width 2)

  (setq python-indent 2)

  (setq css-indent-offset 2)

  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))

  (setq web-mode-markup-indent-offset 2)
#+END_SRC

*** Syntax Checking

Enable global syntax checking through flycheck

#+BEGIN_SRC emacs-lisp

  (add-hook 'after-init-hook #'global-flycheck-mode)

#+END_SRC
*** Highlight FIXME, TODO and BUG statements
#+BEGIN_SRC emacs-lisp
  (fixme-mode t)
#+END_SRC

*** Auto-indent with the Return key

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC

*** Show matching paren

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

*** Delete trailing whitespace

Delete trailing whitespace in any mode, _except_ when editing
Markdown, because it uses [[http://daringfireball.net/projects/markdown/syntax#p][two trailing blanks]] as a signal to create a
line break.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook '(lambda()
                                (when (not (derived-mode-p 'markdown-mode))
                                  (delete-trailing-whitespace))))
#+END_SRC

** Ruby

For syntax checking to work, also run the following commands:

- =$ gem install rubocop ruby-lint=
- =npm install -g eslint=

#+BEGIN_SRC emacs-lisp
  (setq ruby-indent-level 2)
  (add-to-list 'auto-mode-alist '("\\.scss?\\'" . scss-mode))

  (add-to-list 'auto-mode-alist '("\\.rb?\\'" . enh-ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.rake?\\'" . enh-ruby-mode))
  (add-hook 'enh-ruby-mode-hook 'linum-mode)

  ; From Phil
  (add-hook 'ruby-mode-hook
           (lambda ()
             (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
#+END_SRC

*** =robe-mode=

Code navigation, documentation lookup and completion for Ruby

#+BEGIN_SRC emacs-lisp
  (add-hook 'enh-ruby-mode-hook 'robe-mode)
  (add-hook 'robe-mode-hook 'ac-robe-setup)
  (add-to-list 'auto-mode-alist '("\\.erb?\\'" . robe-mode))
#+END_SRC

Start =robe-mode= with =M-x robe-start=.

Shortcuts:

- =C-c C-d= Lookup documentation
- =M-.= Jump to definition
- =TAB= Auto-completion through =auto-complete-mode=

**** =auto-complete= for =robe-mode=

#+BEGIN_SRC emacs-lisp

(add-hook 'enh-ruby-mode-hook 'auto-complete-mode)

#+END_SRC

** Lisp
When working with Lisp, there's the option of handing parentheses
manually or let them be dealt with by the magic that is [[http://shaunlebron.github.io/parinfer/][Parinfer]]. I'm
using the wonderful [[https://github.com/DogLooksGood/parinfer-mode][parinfer-mode]].

#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'clojure-mode-hook #'parinfer-mode)
  ;; (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
  (setq parinfer-extensions '(company pretty-parens evil))
  (eval-after-load "parinfer"
    '(progn
       (define-key parinfer-mode-map (kbd "C-,") 'parinfer-toggle-mode)
       (define-key parinfer-region-mode-map (kbd ">") 'parinfer-shift-right)
       (define-key parinfer-region-mode-map (kbd "<") 'parinfer-shift-left)))
#+END_SRC

** Clojure
*** Notes on Cider

https://github.com/clojure-emacs/cider

-  =M-x cider-jack-in= To start REPL
-  =C-c C-k= Evaluate current buffer
-  =C-c M-n= Change ns in cider-nrepl to current ns
-  =C-c C-d C-d= Display documentation for the symbol under point
-  =C-c C-d C-a= Apropos search for arbitrary text across function names
   and documentation

_CIDER REPL Key Bindings_

- =C-↑, C-↓= Cycle through REPL history.
- More Cider shortcuts [[https://github.com/clojure-emacs/cider#cider-mode][here]].

_Dependencies_

Create a =~/.lein/profiles.clj= file with:

#+BEGIN_SRC clojure
    {:user {:plugins [[cider/cider-nrepl "0.13.0-SNAPSHOT"]
                      [refactor-nrepl "2.2.0"]]
            :dependencies [[org.clojure/tools.nrepl "0.2.12"]]}}
#+END_SRC

*** Emacs configuration

Setup Cider with =auto-complete=.

#+BEGIN_SRC emacs-lisp

  (require 'ac-cider)
  ;;(setq ac-quick-help-delay 0.5)
  (add-hook 'cider-mode-hook 'ac-flyspell-workaround)
  (add-hook 'cider-mode-hook 'ac-cider-setup)
  (add-hook 'cider-repl-mode-hook 'ac-cider-setup)
  (eval-after-load "auto-complete"
    '(progn
       (add-to-list 'ac-modes 'cider-mode)
       (add-to-list 'ac-modes 'cider-repl-mode)))

#+END_SRC

Setup =clj-refactor=.

#+BEGIN_SRC emacs-lisp
  (require 'clj-refactor)
  (add-hook 'clojure-mode-hook
            (lambda ()
              (clj-refactor-mode 1)
              (setq cljr-warn-on-eval nil)
              (yas-minor-mode 1) ; for adding require/use/import statements
              ;; This choice of keybinding leaves cider-macroexpand-1 unbound
              (cljr-add-keybindings-with-prefix "C-c C-m")))
#+END_SRC

When connecting to a repl, don't pop to the new repl buffer.

#+BEGIN_SRC emacs-lisp
(setq cider-repl-pop-to-buffer-on-connect nil)
#+END_SRC

** JavaScript

*** =flycheck-flow=
**** Type Inference
Flow uses type inference to find bugs even without type annotations.
It precisely tracks the types of variables as they flow through your
program.

**** Idiomatic JS
Flow is designed for JavaScript programmers. It understands common
JavaScript idioms and very dynamic code.

**** Realtime Feedback
Flow incrementally rechecks your changes as you work, preserving the
fast feedback cycle of developing plain JavaScript.
#+BEGIN_SRC elisp
(require 'flycheck-flow)
(add-hook 'javascript-mode-hook 'flycheck-mode)
#+END_SRC
*** =js2-mode= and =tern=

JavaScript is improved with =js2-mode= as well as
[[http://ternjs.net/][Tern]].

Tern is a stand-alone code-analysis engine for JavaScript used for:

#+BEGIN_EXAMPLE
    * Auto completion on variables and properties
    * Function argument hints
    * Querying the type of an expression
    * Finding the definition of something
    * Automatic refactoring
#+END_EXAMPLE

Tern is installed as an NPM package: =npm install -g tern=.

To enable Tern in emacs, also the =tern= and =tern-auto-complete=
packages are installed.

For completion to work in a Node.js project, a =.tern-project= file like
this is required:

#+BEGIN_EXAMPLE
    {"plugins": {"node": {}}}
#+END_EXAMPLE

or

#+BEGIN_EXAMPLE
    {"libs": ["browser", "jquery"]}
#+END_EXAMPLE

[[http://ternjs.net/doc/manual.html#configuration][Here]] is more documentation on how to configure a Tern project.

Tern shortcuts:

-  =M-.= Jump to the definition of the thing under the cursor.
-  =M-,= Brings you back to last place you were when you pressed M-..
-  =C-c C-r= Rename the variable under the cursor.
-  =C-c C-c= Find the type of the thing under the cursor.
-  =C-c C-d= Find docs of the thing under the cursor. Press again to
   open the associated URL (if any).

*** =flow=
https://github.com/flowtype/flow-for-emacs/

An emacs plugin for Flow, a static typechecker for JavaScript.

- Shows errors found by typechecking JavaScript code with Flow.
- Provides a bunch of common IDE features powered by Flow to aid reading and writing JavaScript code.
#+BEGIN_SRC elisp
(load-file "~/.emacs.d/flow-for-emacs/flow.el")
#+END_SRC

*** Emacs configuration

#+BEGIN_SRC emacs-lisp

  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  (add-hook 'js-mode-hook 'js2-minor-mode)
  (setq js2-highlight-level 3)
  (setq js-indent-level 2)
  ;; Semicolons are optional in JS, do not warn about them missing
  (setq js2-strict-missing-semi-warning nil)

  ;; Tern
  (add-hook 'js-mode-hook (lambda () (tern-mode t)))
  (eval-after-load 'tern
     '(progn
        (require 'tern-auto-complete)
        (tern-ac-setup)))


#+END_SRC

** Web

*** Impatient Mode - Live Coding Emacs/Browser

https://github.com/netguy204/imp.el

Enable the web server provided by simple-httpd:

#+BEGIN_EXAMPLE
    M-x httpd-start
#+END_EXAMPLE

Publish buffers by enabling the minor mode impatient-mode.

#+BEGIN_EXAMPLE
    M-x impatient-mode
#+END_EXAMPLE

And then point your browser to http://localhost:8080/imp/, select a
buffer, and watch your changes appear as you type!

*** Emacs Configuration

#+BEGIN_SRC emacs-lisp
  ;; web-mode
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  ;; Ruby Templates
  (add-to-list 'auto-mode-alist '("\\.erb?\\'" . web-mode))
  ;; Handlebars
  (add-to-list 'auto-mode-alist '("\\.hbs?\\'" . web-mode))
  ;; JSON
  (add-to-list 'auto-mode-alist '("\\.json?\\'" . web-mode))

  (setq web-mode-enable-current-element-highlight t)
  (setq web-mode-ac-sources-alist
    '(("html" . (ac-source-words-in-buffer ac-source-abbrev))))
#+END_SRC

** p_slides

For [[https://github.com/munen/p_slides][p_slides]] presentations, run markdown-mode. This is a very
primitive check.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("presentation.html" . markdown-mode))
  (add-hook 'markdown-mode-hook 'flyspell-mode)
#+END_SRC

*** TODO Auto Reload

#+BEGIN_SRC

;;(defun sync-to-pi ()
;;  "Sync org file to Raspberry Pi with external script."
;;  (when (eq major-mode 'web-mode)
;;    (shell-command-to-string "xdotool search --onlyvisible --class Chromium windowfocus key ctrl+r")))
;;
;;(add-hook 'after-save-hook #'sync-to-pi)


;;echo "$(date --rfc-3339=seconds) Refresh: $FILE"
;;CUR_WID=$(xdotool getwindowfocus)
;;
;;#gets the first $BROWSER window, if you have more than one
;;#$BROWSER window open, it might not refresh the right one,
;;#as an alternative you can search by the window/html title
;;WID=$(xdotool search --onlyvisible --class $BROWSER|head -1)
;;#TITLE="window/html file title"
;;#WID=$(xdotool search --title "$TITLE"|head -1)
;;xdotool windowactivate $WID
;;xdotool key 'ctrl+r'
;;xdotool windowactivate $CUR_WID

#+END_SRC

** yaml

#+BEGIN_SRC emacs-lisp
  (require 'yaml-mode)
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook 'auto-fill-mode)

#+END_SRC

** Git

Create shortcut for =magit=.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

** Projectile

Enable Projectile globally
#+BEGIN_SRC emacs-lisp
  (projectile-global-mode)
#+END_SRC

* org-mode
** Plain Lists
Allow ‘a.’, ‘A.’, ‘a)’ and ‘A) as list elements:

#+BEGIN_SRC emacs-lisp

(setq org-list-allow-alphabetical t)

#+END_SRC
** KOMA Script export

#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(add-to-list 'org-latex-classes
             '("scrartcl"
               "\\documentclass{scrartcl}"
               ("\\section{%s}" . "\\section*{%s}")))
#+END_SRC
** Tufte org-mode export

#+BEGIN_SRC emacs-lisp

(require 'ox-latex)
(add-to-list 'org-latex-classes
	     '("tuftehandout"
	       "\\documentclass{tufte-handout}
\\usepackage{color}
\\usepackage{amssymb}
\\usepackage{amsmath}
\\usepackage{gensymb}
\\usepackage{nicefrac}
\\usepackage{units}"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

#+END_SRC

#+BEGIN_SRC emacs-lisp

  (require 'org)

  ; languages for org-babel support
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (sh . t)
     (js . t)
     (ruby . t)
     ))

  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)

  (setq org-directory "~/switchdrive/org/")

  (defun set-org-agenda-files ()
    "Set different org-files to be used in `org-agenda`."
    (setq org-agenda-files (list (concat org-directory "things.org")
                                 (concat org-directory "refile-beorg.org")
                                 (concat org-directory "inbox.org")
                                 (concat "~/Dropbox/ZHAW/web3-unterlagen/README.org")
                                 (concat "~/Dropbox/ZHAW/weng-unterlagen/README.org")
                                 (concat "~/src/200ok/crowdfunding/TODO.org")
                                 (concat org-directory "reference.org"))))

  (set-org-agenda-files)

  (global-set-key "\C-cl" 'org-store-link)

  (defun things ()
    "Open main 'org-mode' file and start 'org-agenda' for today."
    (interactive)
    (find-file (concat org-directory "things.org"))
    (set-org-agenda-files)
    (org-agenda-list)
    (org-agenda-day-view)
    (shrink-window-if-larger-than-buffer)
    (other-window 1))

  (evil-leader/set-key
    "a" 'org-archive-subtree-default)

  ;; Allow =pdflatex= to use shell-commands
  ;; This will allow it to use =pygments= as syntax highlighter for exports to PDF
  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  ;; Include =minted= package for LaTeX exports
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)


#+END_SRC

** Capture Templates
Set up capture templates for:

- Todos which land in =inbox.org=
- Code Snippets which land in =snippets.org=
- Shopping Items which get appended to the Shopping List in =things.org=
- Media Entries (watch/read later items) that land in =media.org=

Org Capture Templates are explained [[http://orgmode.org/manual/Capture-templates.html][here]], Org Template expansion [[http://orgmode.org/manual/Template-expansion.html#Template-expansion][here.]]

#+BEGIN_SRC emacs-lisp
  ;; Set org-capture inbox
  (setq org-default-notes-file (concat org-directory "inbox.org"))
  (define-key global-map "\C-cc" 'org-capture)

  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline (concat org-directory "inbox.org") "Tasks")
           "* TODO %?\n  %U\n  %i\n  %a")
          ("s" "Code Snippet" entry (file+headline "~/src/200ok/knowledge/README.org" "Snippets")
           ;; Prompt for tag and language
           "* %?\t%^g\n#+BEGIN_SRC %^{language}\n%i\n#+END_SRC")
          ("S" "Shopping Item" entry
           (file+headline (concat org-directory "things.org") "Shopping")
           ;; Prompt for tag and language
           "* TODO %?\n  %U\n")
          ("m" "Media" entry
           (file+datetree (concat org-directory "media.org"))
           "* %?\nURL: \nEntered on %U\n")))

#+END_SRC

** Pomodoro

A leightweight implementation of the Pomodoro Technique is implemented
through customizing orgmode. For every Clock that is started (=C-c C-x
C-i=) an automatic Timer is scheduled to 25min. After these 25min are
up, a "Time to take a break!" message is played and a pop-up
notification is shown.

The timer is not automatically stopped on clocking out, because clocking
in should still work on new tasks without resetting the Pomodoro.

The timer can manyally be stopped with =M-x org-timer-stop=.

A break can be started with =M-x pomodoro-break=. A pomodoro can also
manually be started without clocking in via =M-x pomodoro-start=.

#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/org-pomodoro")
#+END_SRC
** Keyword sets

I use two workflow sets:

- One for TODOs which can either be TODO or DONE
- Another for tasks that I am WAITING for something to happen

Additionally I sometimes use the keywords PROJECT and AGENDA to denote
special bullets that I might tag (schedule/deadline) in the agenda.
These keywords give semantics to those bullets.

Note that "|" denotes a semantic state change that is reflected in a
different color. Putting the pipe at the end means that all states
prior should be shown in the same color.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
            '((sequence "TODO" "|" "DONE")
              (sequence "PROJECT" "AGENDA" "|" "MINUTES")
              (sequence "WAITING" "|")))
#+END_SRC

** Clock Table

When using a clock table, org will by default sum up the time in
perfectly human readable terms like this:

| Headline     | Time      |
|--------------+-----------|
| *Total time* | *1d 1:03* |

For easy calculations (I don't want to parse our hours, weeks and what
not), I do prefer that the summation is done only in hours and
minutes. Therefore, I over-wrote the =org-time-clocksum-format= function:

#+BEGIN_SRC emacs-lisp
(setq org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
#+END_SRC

This will render the same time as above as:

| Headline     | Time    |
|--------------+---------|
| *Total time* | *25:03* |

* pdf-tools

When using =evil-mode= and =pdf-tools= and looking at a zoomed PDF, it
will blink, because the cursor blinks. This configuration disables
this whilst retaining the blinking cursor in other modes.

#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'pdf-view-mode 'emacs)
(add-hook 'pdf-view-mode-hook
  (lambda ()
    (set (make-local-variable 'evil-emacs-state-cursor) (list nil))))
#+END_SRC

* Elfeed

** Initialize
Elfeed is an extensible web feed reader for Emacs, supporting both
Atom and RSS.

#+BEGIN_SRC emacs-lisp

    (require 'elfeed)
    (require 'elfeed-goodies)

    (elfeed-goodies/setup)

;; This should work, but there seems to be a bug
;; https://github.com/joostkremers/visual-fill-column/issues/21
;; For the time being, use =M-x visual-fill-column-mode=
;;    (add-hook 'elfeed-show-mode-hook '(lambda()
;;                                        (if (string-equal "*elfeed-entry*" (buffer-name))
;;                                            (visual-fill-column-mode))))

#+END_SRC

** Define elfeed feeds
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/elfeed-feeds.el")
#+END_SRC
* Misc Custom Improvements
** Translations
This is a wrapper application around the dict.cc translation service.

Demo: [[https://asciinema.org/a/hMTM9EDHE0cphaDRFr4JXr1iw][https://asciinema.org/a/hMTM9EDHE0cphaDRFr4JXr1iw.png]]

#+BEGIN_SRC emacs-lisp

  ;;; package --- unofficial dict.cc elisp wrapper
  ;;; Commentary: This is a wrapper application around the dict.cc translation service
  ;;; Code:

  (defvar dict.cc-url "http://www.dict.cc/")
  (defvar res)
  (defvar words1)
  (defvar words2)
  (defvar translations)

  (defun extract-words-from-buffer (buffer number)
    "Given a http BUFFER from dict.cc and as NUMBER either '1' or '2', return the translated words."
    (with-current-buffer buffer
      ;; Very hacky. In the HTML results of dict.cc, there's embedded
      ;; JavaScript with the results embedded in two arrays c1Arr and
      ;; c2Arr. Parse those JS Arrays into a list and return it.
      (let* ((js-var (concat "var c" number "Arr = new Array("))
             (begin (+ (string-match js-var (buffer-string))
                       ;; Number of characters until first array element
                       ;; after match point
                       25))
             (end   (if begin
                        (string-match ")" (buffer-string) begin))))
        ;; TODO: Special characters conversion does not work.
        ;; `string-to-multibyte` is obviously the wrong function
        (mapcar #' string-to-multibyte
        (split-string (substring (buffer-string) begin end)
                      "\,")))))

  ;; (with-current-buffer res
  ;;   (while (re-search-forward "my_regexp")
  ;;     (print (match-string 0))))


  (defun insert-translation-to-buffer
      (list)
      "Given a LIST of translations, add them to the buffer."
      (when list
        (progn
          (insert (car list))
          (insert "\n"))
        (insert-translation-to-buffer (cdr list))))


  (defun initialize-translations-buffer (search-term)
    "Create a new buffer and initializs it with SEARCH-TERM."

    ;; TODO: If a buffer "dict-results" exists, close it

    ;; Get or create a new buffer called "dict-results"
    (get-buffer-create "dict-results")

    (with-current-buffer "dict-results"
      ;; Initialize
      (erase-buffer)
      (org-mode)

      ;; TODO: First create a new minor mode, because local key maps are
      ;; shared between all buffers of the same major mode!
      ;; (local-set-key (kbd "q") '(lambda()
      ;;                             (interactive)
      ;;                             (delete-window)))

      (insert (concat "* Translations for: " search-term "\n\n"))))

  (defun main (results)
    "Main logic: Add the dict.cc RESULTS to a results buffer."

    (setq words1 (extract-words-from-buffer results "1"))
    (setq words2 (extract-words-from-buffer results "2"))

    (setq translations (mapcar* (lambda (w1 w2)
                                  (concat "|" w1 "|" w2 "|"))
                                words1 words2))

    (with-current-buffer "dict-results"
      ;; Move behind the "Translations for: " header
      (forward-line)
      ;; Add actual data
      (insert-translation-to-buffer translations)
      ;; Move one line up to the last translations row
      (forward-line -1)
      ;; Pretty print the table
      (org-cycle)
      (forward-line 2)
      (insert "\n\nTranslations by http://dict.cc - this is an unofficial app")
      ;; Move to beginning of buffer
      (goto-char (point-min)))

    (split-window)
    (switch-to-buffer "dict-results"))

  (defun query-dict.cc (search-term)
    "Query dict.cc with SEARCH-TERM."
    (let ((url-request-method "GET")
          (arg-stuff (concat "?s=" (url-hexify-string search-term))))
      (url-retrieve (concat dict.cc-url arg-stuff)
                    (lambda (status)
                      (setq res (current-buffer))
                      (let ((res (current-buffer)))
                        ;; Debug for REPL
                        ;; (setq res (current-buffer))
                        (main res))))))

  (defun dict ()
    "Lookup a word on dict.cc."
    (interactive)
    (let ((word (read-string "Word: " (word-at-point))))

      (initialize-translations-buffer word)

      (query-dict.cc word)

      (other-window 1)))

  (provide 'dict)
  ;;; dict.el ends here

#+END_SRC
** Helper functions to clean up the gazillion buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

  (defun kill-dired-buffers ()
    "Kill all open dired buffers."
    (interactive)
    (mapc (lambda (buffer)
            (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
              (kill-buffer buffer)))
          (buffer-list)))
#+END_SRC
** Encode HTML to HTML entities
#+BEGIN_SRC emacs-lisp
  (defun encode-html (start end)
    "Encodes HTML entities; works great in Visual Mode (START END)."
    (interactive "r")
    (save-excursion
      (save-restriction
        (narrow-to-region start end)
        (goto-char (point-min))
        (replace-string "&" "&amp;")
        (goto-char (point-min))
        (replace-string "<" "&lt;")
        (goto-char (point-min))
        (replace-string ">" "&gt;")
        )))
#+END_SRC
** Convenience functions when working with PDF exports
[[https://www.youtube.com/watch?v=Pd0JwOqh-gI][Here]] is a screencast showing how I edit Markdown or org-mode files in
Emacs whilst having a PDF preview.

#+BEGIN_SRC emacs-lisp
  (defun md-compile ()
    "Compiles the currently loaded markdown file using pandoc into a PDF"
    (interactive)
    (save-buffer)
    (shell-command (concat "pandoc " (buffer-file-name) " -o "
                           (replace-regexp-in-string "md" "pdf" (buffer-file-name)))))

  (defun update-other-buffer ()
    (interactive)
    (other-window 1)
    (revert-buffer nil t)
    (other-window -1))

  (defun md-compile-and-update-other-buffer ()
    "Has as a premise that it's run from a markdown-mode buffer and the
     other buffer already has the PDF open"
    (interactive)
    (md-compile)
    (update-other-buffer))

  (defun latex-compile-and-update-other-buffer ()
    "Has as a premise that it's run from a latex-mode buffer and the
     other buffer already has the PDF open"
    (interactive)
    (save-buffer)
    (shell-command (concat "pdflatex " (buffer-file-name)))
    (switch-to-buffer (other-buffer))
    (kill-buffer)
    (update-other-buffer))

  (defun org-compile-beamer-and-update-other-buffer ()
    "Has as a premise that it's run from an org-mode buffer and the
     other buffer already has the PDF open"
    (interactive)
    (org-beamer-export-to-pdf)
    (update-other-buffer))

  (defun org-compile-latex-and-update-other-buffer ()
    "Has as a premise that it's run from an org-mode buffer and the
     other buffer already has the PDF open"
    (interactive)
    (org-latex-export-to-pdf)
    (update-other-buffer))

  (eval-after-load 'latex-mode
    '(define-key latex-mode-map (kbd "C-c r") 'latex-compile-and-update-other-buffer))

  (define-key org-mode-map (kbd "C-c lr") 'org-compile-latex-and-update-other-buffer)
  (define-key org-mode-map (kbd "C-c br") 'org-compile-beamer-and-update-other-buffer)

  (eval-after-load 'markdown-mode
    '(define-key markdown-mode-map (kbd "C-c r") 'md-compile-and-update-other-buffer))
#+END_SRC
** Use left Cmd to create Umlauts (thx JCF)

#+BEGIN_SRC emacs-lisp
  (define-key key-translation-map [dead-diaeresis]
    (lookup-key key-translation-map "\C-x8\""))
  (define-key isearch-mode-map [dead-diaeresis] nil)
  (global-set-key (kbd "M-u")
                  (lookup-key key-translation-map "\C-x8\""))

#+END_SRC

** Clean up messy buffers (i.e. web wikis or elfeed-show)
#+BEGIN_SRC emacs-lisp

  (defun visual-clean ()
    "Clean up messy buffers (i.e. web wikis or elfeed-show)"
    (interactive)
    (visual-line-mode)
    (visual-fill-column-mode))

#+END_SRC
* OS Specific
** Linux

#+BEGIN_SRC emacs-lisp

  (when (eq system-type 'gnu/linux)
    ;; Default Browser
    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "chromium")
    (menu-bar-mode -1)
    ;; enable pdf-tools
    (pdf-tools-install))

#+END_SRC

** macOS

#+BEGIN_SRC emacs-lisp

  (when (eq system-type 'darwin)
    (set-frame-font "Menlo 14")
    ; Use Spotlight to search with M-x locate
    (setq locate-command "mdfind")
    ; exec-path-from-shell-initialize might make this line obsolete
    ;(setq mu4e-mu-binary "/usr/local/bin/mu")
    )

#+END_SRC

* Mail

** mu4e

As MTA [[http://www.djcbsoftware.nl/code/mu/mu4e/][MU4E]] is used. As SMTP the Emacs =smtpmail= package.

*** Installation

*** General

-  Configure =.offlineimaprc= file for IMAP
-  Configure =.authinfo= file for SMTP
-  https://www.emacswiki.org/emacs/GnusAuthinfo


**** Authentication
Tell Emacs where to find the encrypted =.authinfo= file.

#+BEGIN_SRC
(setq auth-sources
    '((:source "~/.authinfo.gpg")))
#+END_SRC

**** PDFs

To open PDFs within Mu4e with Emacs, then there's one thing to
configure. Mu4e uses =xdg-open= to chose the app to open any mime type.

Configure =xdg-open= to use Emacs:

#+BEGIN_EXAMPLE
    xdg-mime default emacs.desktop application/pdf
#+END_EXAMPLE

**** OS X

MU works on a local Maildir folder, for synching that =offlineimap= is
used. To install: =brew install offlineimap=

For MU4E to work, install MU and MU4E: =brew install mu --with-emacs=

For starttls to work when sending mail, install gnutls:
=brew install gnutls=

**** Debian

=apt-get install offlineimap mu4e gnutls-bin=

** Emacs Configuration

#+BEGIN_SRC emacs-lisp

  (require 'mu4e)

  (require 'org-mu4e)

  (setq send-mail-function 'smtpmail-send-it)

  ;; Default account on startup
  (setq user-full-name  "Alain M. Lafon"
        mu4e-sent-folder "/200ok/INBOX.Sent"
        mu4e-drafts-folder "/200ok/INBOX.Drafts"
        mu4e-trash-folder "/200ok/INBOX.Trash")

  (setq smtpmail-debug-info t
        message-kill-buffer-on-exit t
        mu4e-get-mail-command "offlineimap"
        mu4e-attachment-dir "~/switchdrive/org/files/inbox")

  (setq mu4e-maildir "~/Maildir/")

  ;; HTML Mails
  (require 'mu4e-contrib)
  (setq mu4e-html2text-command 'mu4e-shr2text)
  (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

  ;; Format=Flowed for those other mail clients
  (setq mu4e-compose-format-flowed t)

  ;; show full addresses in view message (instead of just names)
  ;; toggle per name with M-RET
  (setq mu4e-view-show-addresses t)

  ;; Alternatives are the following, however in first tests they
  ;; show inferior results
  ;; (setq mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout")
  ;; (setq mu4e-html2text-command "html2text -utf8 -width 72")
  ;; (setq mu4e-html2text-command "w3m -dump -T text/html")

  (defvar my-mu4e-account-alist
    '(("200ok"
       (user-full-name  "Alain M. Lafon")
       (mu4e-compose-signature "200ok GmbH\nGeschäftsführer\n\nalain@200ok.ch\n+41 76 405 05 67\nhttps://200ok.ch/\n\nCheck out our newest incubator: https://quickshift.ch/")
       (mu4e-compose-signature-auto-include t)
       (mu4e-sent-folder "/200ok/INBOX.Sent")
       (mu4e-drafts-folder "/200ok/INBOX.Drafts")
       (mu4e-trash-folder "/200ok/INBOX.Trash")
       (user-mail-address "alain@200ok.ch")
       (smtpmail-default-smtp-server "smtp.mailgun.org")
       (smtpmail-local-domain "200ok.ch")
       (smtpmail-smtp-user "alain@200ok.ch")
       (smtpmail-smtp-server "smtp.mailgun.org")
       (smtpmail-stream-type starttls)
       (smtpmail-smtp-service 25))
      ("zhaw"
       (mu4e-compose-signature-auto-include nil)
       (user-full-name  "Alain M. Lafon")
       (mu4e-sent-folder "/zhaw/INBOX.Sent Messages")
       (mu4e-drafts-folder "/zhaw/INBOX.Drafts")
       (mu4e-trash-folder "/zhaw/INBOX.Trash")
       (user-mail-address "lafo@zhaw.ch")
       (smtpmail-default-smtp-server "mail.your-server.de")
       (smtpmail-local-domain "zhaw.ch")
       (smtpmail-smtp-user "zhaw@dispatched.ch")
       (smtpmail-smtp-server "mail.your-server.de")
       (smtpmail-stream-type starttls)
       (smtpmail-smtp-service 25))
      ("zen-tempel"
       (user-full-name  "Zen Mönch Alain M. Lafon")
       (mu4e-compose-signature "Insopor Zen Akademie\nZen Mönch\n\nalain@zen-tempel.ch\n+41 76 405 05 67\n\nhttp://zen-temple.net/")
       (mu4e-compose-signature-auto-include t)
       (mu4e-sent-folder "/zen-tempel/INBOX.Sent")
       (mu4e-drafts-folder "/zen-tempel/INBOX.Drafts")
       (mu4e-trash-folder "/zen-tempel/INBOX.Trash")
       (user-mail-address "alain@zen-tempel.ch")
       (smtpmail-default-smtp-server "mail.your-server.de")
       (smtpmail-local-domain "zen-tempel.ch")
       (smtpmail-smtp-user "alain@zen-tempel.ch")
       (smtpmail-smtp-server "mail.your-server.de")
       (smtpmail-stream-type starttls)
       (smtpmail-smtp-service 25))
      ("dispatched"
       (user-full-name  "Alain M. Lafon")
       (mu4e-compose-signature-auto-include nil)
       (mu4e-sent-folder "/dispatched/INBOX.Sent")
       (mu4e-drafts-folder "/dispatched/INBOX.Drafts")
       (mu4e-trash-folder "/dispatched/INBOX.Trash")
       (user-mail-address "alain.lafon@dispatched.ch")
       (smtpmail-default-smtp-server "mail.your-server.de")
       (smtpmail-local-domain "dispatched.ch")
       (smtpmail-smtp-user "munen@dispatched.ch")
       (smtpmail-smtp-server "mail.your-server.de")
       (smtpmail-stream-type starttls)
       (smtpmail-smtp-service 25))))

  ;; Whenever a new mail is to be composed, change all relevant
  ;; configuration variables to the respective account. This method is
  ;; taken from the MU4E documentation:
  ;; http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html#Multiple-accounts
  (defun my-mu4e-set-account ()
    "Set the account for composing a message."
    (let* ((account
            (if mu4e-compose-parent-message
                (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                  (string-match "/\\(.*?\\)/" maildir)
                  (match-string 1 maildir))
              (completing-read (format "Compose with account: (%s) "
                                       (mapconcat #'(lambda (var) (car var))
                                                  my-mu4e-account-alist "/"))
                               (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                               nil t nil nil (caar my-mu4e-account-alist))))
           (account-vars (cdr (assoc account my-mu4e-account-alist))))
      (if account-vars
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars)
        (error "No email account found"))))


  (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
  (add-hook 'mu4e-compose-mode-hook 'flyspell-mode)
  (add-hook 'mu4e-compose-mode-hook (lambda ()
                                     (ispell-change-dictionary "deutsch")))

  ;; gpg
  ;; C-c C-e s to sign
  ;; C-c C-e e to encrypt
  ;; C-c C-e v to verify the signature
  ;; C-c C-e d to decrypt
  (add-hook 'mu4e-compose-mode-hook 'epa-mail-mode)
  (add-hook 'mu4e-view-mode-hook 'epa-mail-mode)

  ;; Automatic line breaks when reading mail
  (add-hook 'mu4e-view-mode-hook 'visual-line-mode)

  (setq mu4e-refile-folder
        (lambda (msg)
          (cond
           ((string-match "^/dispatched.*"
                          (mu4e-message-field msg :maildir))
            "/dispatched/INBOX.Archive")
           ((string-match "^/zen-tempel.*"
                          (mu4e-message-field msg :maildir))
            "/zen-tempel/INBOX.Archive")
           ((string-match "^/200ok.*"
                          (mu4e-message-field msg :maildir))
            "/200ok/INBOX.Archive")
           ((string-match "^/zhaw.*"
                          (mu4e-message-field msg :maildir))
            "/zhaw/INBOX.Archive")
           ;; everything else goes to /archive
           (t  "/archive"))))


  ;; For mail completion, only consider emails that have been seen in
  ;; the last 6 months to get rid of all the legacy mail addresses of
  ;; people.
  (setq mu4e-compose-complete-only-after (format-time-string
                                          "%Y-%m-%d"
                                          (time-subtract (current-time) (days-to-time 150))))

  ;; Empty the initial bookmark list
  (setq mu4e-bookmarks '())

  ;; Re-define all standard bookmarks to not include the spam folders
  ;; for searches
  (defvar d-spam "NOT (maildir:/dispatched/INBOX.spambucket OR maildir:/zen-tempel/INBOX.spambucket OR maildir:/200ok/INBOX.spambucket OR maildir:/zhaw/INBOX.spambucket)")

  (defvar draft-folders (string-join '("maildir:/dispatched/INBOX.Drafts"
                                       "maildir:/zhaw/INBOX.Drafts"
                                       "maildir:/zen-tempel/INBOX.Drafts"
                                       "maildir:/200ok/INBOX.Drafts")
                                     " OR "))

  (defvar spam-folders (string-join '("maildir:/dispatched/INBOX.spambucket"
                                       "maildir:/zhaw/INBOX.spambucket"
                                       "maildir:/zen-tempel/INBOX.spambucket"
                                       "maildir:/200ok/INBOX.spambucket")
                                    " OR "))

  (add-to-list 'mu4e-bookmarks
               '((concat d-spam " AND date:today..now")                  "Today's messages"     ?t))
  (add-to-list 'mu4e-bookmarks
               '((concat d-spam " AND date:7d..now")                     "Last 7 days"          ?w))
  (add-to-list 'mu4e-bookmarks
               '((concat d-spam " AND mime:image/*")                     "Messages with images" ?p))
  (add-to-list 'mu4e-bookmarks
               '(spam-folders "All spambuckets"     ?S))
  (add-to-list 'mu4e-bookmarks
               '(draft-folders "All drafts"     ?d))
  (add-to-list 'mu4e-bookmarks
               '((concat d-spam " AND (flag:unread OR flag:flagged) AND NOT flag:trashed")
                 "Unread messages"      ?u))

  ;; Check for supposed attachments prior to sending them
  (defvar my-message-attachment-regexp "\\([Ww]e send\\|[Ii] send\\|attach\\|angehängt\\|[aA]nhang\\|angehaengt\\|haenge\\|hänge\\)")
  (defun my-message-check-attachment nil
    "Check if there is an attachment in the message if I claim it."
    (save-excursion
      (message-goto-body)
      (when (search-forward-regexp my-message-attachment-regexp nil t nil)
        (message-goto-body)
        (unless (or (search-forward "<#part" nil t nil)
                    (message-y-or-n-p
                     "No attachment. Send the message ?" nil nil))
          (error "No message sent")))))
  (add-hook 'message-send-hook 'my-message-check-attachment)


  ;; Periodic updates - every 15 minutes
  (setq mu4e-update-interval (* 15 60))

  ;; Updates happen in the background
  (setq mu4e-index-update-in-background t)

#+END_SRC

** Do not reply to self

#+BEGIN_SRC emacs-lisp
  (setq mu4e-compose-dont-reply-to-self t)

  (add-to-list 'mu4e-user-mail-address-list "alain@200ok.ch")
  (add-to-list 'mu4e-user-mail-address-list "alain.lafon@dispatched.ch")
  (add-to-list 'mu4e-user-mail-address-list "lafo@zhaw.ch")
#+END_SRC

** TODO Use Quoted printable text for outgoing messages to enable automatic line breaks
*** If this is successfull, send upstream PR to MU4E
https://mathiasbynens.be/notes/gmail-plain-text
https://mothereff.in/quoted-printable
https://www.gnu.org/software/emacs/manual/html_node/emacs-mime/qp.html

* Write Quality

** =writegood-mode=
https://github.com/bnbeckwith/writegood-mode

This is a minor mode to aid in finding common writing problems.

It highlights text based on a set of weasel-words, passive-voice and
duplicate words.

** Flyspell
#+BEGIN_SRC emacs-lisp
  ;; Order corrections by likeliness, not by the default of alphabetical
  ;; ordering
  (setq flyspell-sort-corrections nil)
  ;; Do not print messages for every word (when checking the entire buffer)
  ;; This is a major performance gain
  (setq flyspell-issue-message-flag nil)
  ;; Configure ispell backend
  ;; The german dictionary has been installed taken from here:
  ;; http://fmg-www.cs.ucla.edu/geoff/ispell-dictionaries.html#German-dicts
  (defun flyspell-switch-dictionary()
    "Switch between German and English dictionaries"
    (interactive)
    (let* ((dic ispell-current-dictionary)
           (change (if (string= dic "deutsch") "english" "deutsch")))
      (ispell-change-dictionary change)
      (message "Dictionary switched from %s to %s" dic change)))
#+END_SRC

*** Do not loose all spellchecking information after adding one word to a personal dictionary

Advice to re-check the buffer after a word has been added to the
dictionary. This has the benefit of the word actually being cleared,
but the downside that the whole buffer has to be re-checked which an
take some time.

#+BEGIN_SRC emacs-lisp

(defun flyspell-buffer-after-pdict-save (&rest _)
  (flyspell-buffer))

(advice-add 'ispell-pdict-save :after #'flyspell-buffer-after-pdict-save)

#+END_SRC

The proper solution (for which I don't have time now) is to just mark
all further occurrences of the word you just saved as correct (without
having to recheck the whole buffer).

*** TODO Implement =ispell-pdict-save= with above requirement

* Presentation / Beamer
** Set safe themes (to execute LISP code)

#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes
     (quote
      ("df3e05e16180d77732ceab47a43f2fcdb099714c1c47e91e8089d2fcf5882ea3"
       "d09467d742f713443c7699a546c0300db1a75fed347e09e3f178ab2f3aa2c617"
       "8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26"
       "85c59044bd46f4a0deedc8315ffe23aa46d2a967a81750360fb8600b53519b8a"
       default)))
#+END_SRC
** Configure default theme and font size
#+BEGIN_SRC emacs-lisp
  (defun standard-mode ()
    "Default theme and font size.  Pendant: (presentation-mode)."
    (interactive)

    (set-face-attribute 'default nil :height 130)
    ;; Themes
    ;; (set-frame-parameter nil 'background-mode 'dark)
    ;; Dark, High Contrast
    (load-theme 'wombat)
    (setq frame-background-mode (quote dark))
    ;; Dark, Low contrast
    ;; (load-theme 'darktooth)
    ;; Dark, Lowest contrast
    ;; (load-theme 'zenburn)
     )

#+END_SRC

** Configure presentation theme and font size

#+BEGIN_SRC emacs-lisp
  (defun presentation-mode ()
    "Presentation friendly theme and font size.  Pendant: (standard-mode)."
    (interactive)
    (load-theme 'leuven t)
    (set-face-attribute 'default nil :height 140))
#+END_SRC

** Enable default theme and font

#+BEGIN_SRC emacs-lisp
  (standard-mode)
#+END_SRC
